"""Add log management tables with models imported

Revision ID: 8f9ff6a1f57f
Revises: 38a73c368763
Create Date: 2025-09-02 21:09:23.586929

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8f9ff6a1f57f'
down_revision: Union[str, None] = '38a73c368763'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('log_analytics_configs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('dashboard_type', sa.String(length=20), nullable=False),
    sa.Column('index_pattern', sa.String(length=200), nullable=False),
    sa.Column('default_time_range', sa.String(length=20), nullable=False),
    sa.Column('refresh_interval', sa.String(length=10), nullable=False),
    sa.Column('alerts_enabled', sa.Boolean(), nullable=False),
    sa.Column('alert_rules', sa.JSON(), nullable=True),
    sa.Column('notification_channels', sa.JSON(), nullable=True),
    sa.Column('data_retention_policy', sa.String(length=50), nullable=False),
    sa.Column('anonymization_enabled', sa.Boolean(), nullable=False),
    sa.Column('audit_logging_enabled', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_log_analytics_configs'))
    )
    with op.batch_alter_table('log_analytics_configs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_log_analytics_configs_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_log_analytics_configs_name'), ['name'], unique=True)

    op.create_table('log_archival_rules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('service_pattern', sa.String(length=200), nullable=False),
    sa.Column('age_threshold_days', sa.Integer(), nullable=False),
    sa.Column('storage_backend', sa.String(length=20), nullable=False),
    sa.Column('storage_bucket', sa.String(length=200), nullable=False),
    sa.Column('storage_path_prefix', sa.String(length=500), nullable=False),
    sa.Column('compression', sa.String(length=10), nullable=False),
    sa.Column('format_type', sa.String(length=10), nullable=False),
    sa.Column('retention_days', sa.Integer(), nullable=False),
    sa.Column('delete_after_archive', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('cron_schedule', sa.String(length=100), nullable=False),
    sa.Column('last_run', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_log_archival_rules'))
    )
    with op.batch_alter_table('log_archival_rules', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_log_archival_rules_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_log_archival_rules_name'), ['name'], unique=True)

    op.create_table('log_retention_policies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('service_pattern', sa.String(length=200), nullable=False),
    sa.Column('log_level_filter', sa.String(length=20), nullable=True),
    sa.Column('tier', sa.Enum('CRITICAL', 'OPERATIONAL', 'DEBUG', name='retentiontier'), nullable=False),
    sa.Column('hot_days', sa.Integer(), nullable=False),
    sa.Column('warm_days', sa.Integer(), nullable=False),
    sa.Column('cold_days', sa.Integer(), nullable=False),
    sa.Column('delete_days', sa.Integer(), nullable=False),
    sa.Column('max_index_size_gb', sa.Integer(), nullable=False),
    sa.Column('max_index_age_days', sa.Integer(), nullable=False),
    sa.Column('storage_class_hot', sa.String(length=50), nullable=False),
    sa.Column('storage_class_warm', sa.String(length=50), nullable=False),
    sa.Column('storage_class_cold', sa.String(length=50), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_log_retention_policies'))
    )
    with op.batch_alter_table('log_retention_policies', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_log_retention_policies_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_log_retention_policies_name'), ['name'], unique=True)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('log_retention_policies', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_log_retention_policies_name'))
        batch_op.drop_index(batch_op.f('ix_log_retention_policies_id'))

    op.drop_table('log_retention_policies')
    with op.batch_alter_table('log_archival_rules', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_log_archival_rules_name'))
        batch_op.drop_index(batch_op.f('ix_log_archival_rules_id'))

    op.drop_table('log_archival_rules')
    with op.batch_alter_table('log_analytics_configs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_log_analytics_configs_name'))
        batch_op.drop_index(batch_op.f('ix_log_analytics_configs_id'))

    op.drop_table('log_analytics_configs')
    # ### end Alembic commands ###
