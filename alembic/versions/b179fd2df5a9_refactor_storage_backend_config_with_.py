"""Refactor storage backend config with STI and add TLS fields

Revision ID: b179fd2df5a9
Revises: 919e47593288
Create Date: 2025-05-01 18:56:36.282784

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b179fd2df5a9'
down_revision: Union[str, None] = '919e47593288'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('storage_backend_configs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('path', sa.String(length=512), nullable=True, comment='Path to the directory for storing files.'))
        batch_op.add_column(sa.Column('bucket', sa.String(length=255), nullable=True, comment='Name of the GCS bucket.'))
        batch_op.add_column(sa.Column('prefix', sa.String(length=512), nullable=True, comment='Optional prefix (folder path) within the bucket.'))
        batch_op.add_column(sa.Column('remote_ae_title', sa.String(length=16), nullable=True, comment='AE Title of the remote C-STORE SCP.'))
        batch_op.add_column(sa.Column('remote_host', sa.String(length=255), nullable=True, comment='Hostname or IP address of the remote SCP.'))
        batch_op.add_column(sa.Column('remote_port', sa.Integer(), nullable=True, comment='Network port of the remote SCP.'))
        batch_op.add_column(sa.Column('local_ae_title', sa.String(length=16), nullable=True, comment='AE Title OUR SCU will use when associating.'))
        batch_op.add_column(sa.Column('tls_enabled', sa.Boolean(), server_default=sa.text('false'), nullable=True, comment='Enable TLS for outgoing connections to the remote peer.'))
        batch_op.add_column(sa.Column('tls_ca_cert_secret_name', sa.String(length=512), nullable=True, comment="REQUIRED for TLS: Secret Manager resource name for the CA certificate (PEM) used to verify the remote peer's server certificate."))
        batch_op.add_column(sa.Column('tls_client_cert_secret_name', sa.String(length=512), nullable=True, comment='Optional (for mTLS): Secret Manager resource name for OUR client certificate (PEM).'))
        batch_op.add_column(sa.Column('tls_client_key_secret_name', sa.String(length=512), nullable=True, comment='Optional (for mTLS): Secret Manager resource name for OUR client private key (PEM).'))
        batch_op.add_column(sa.Column('gcp_project_id', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('gcp_location', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('gcp_dataset_id', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('gcp_dicom_store_id', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('base_url', sa.String(length=512), nullable=True, comment='Base URL of the STOW-RS service (e.g., https://dicom.server.com/dicomweb).'))
        batch_op.alter_column('backend_type',
               existing_type=sa.VARCHAR(length=50),
               comment='Discriminator: Identifier for the type of storage backend.',
               existing_comment='Identifier for the type of storage backend.',
               existing_nullable=False)
        batch_op.create_index(batch_op.f('ix_storage_backend_configs_remote_ae_title'), ['remote_ae_title'], unique=False)
        batch_op.drop_column('config')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('storage_backend_configs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False, comment='JSON object containing backend-specific settings (path, AE title, bucket, etc.).'))
        batch_op.drop_index(batch_op.f('ix_storage_backend_configs_remote_ae_title'))
        batch_op.alter_column('backend_type',
               existing_type=sa.VARCHAR(length=50),
               comment='Identifier for the type of storage backend.',
               existing_comment='Discriminator: Identifier for the type of storage backend.',
               existing_nullable=False)
        batch_op.drop_column('base_url')
        batch_op.drop_column('gcp_dicom_store_id')
        batch_op.drop_column('gcp_dataset_id')
        batch_op.drop_column('gcp_location')
        batch_op.drop_column('gcp_project_id')
        batch_op.drop_column('tls_client_key_secret_name')
        batch_op.drop_column('tls_client_cert_secret_name')
        batch_op.drop_column('tls_ca_cert_secret_name')
        batch_op.drop_column('tls_enabled')
        batch_op.drop_column('local_ae_title')
        batch_op.drop_column('remote_port')
        batch_op.drop_column('remote_host')
        batch_op.drop_column('remote_ae_title')
        batch_op.drop_column('prefix')
        batch_op.drop_column('bucket')
        batch_op.drop_column('path')

    # ### end Alembic commands ###
