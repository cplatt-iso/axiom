"""add order dicom evidence table properly

Revision ID: e8210a65f90f
Revises: 0f88b4ec6c77
Create Date: 2025-08-19 03:39:52.839735

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e8210a65f90f'
down_revision: Union[str, None] = '0f88b4ec6c77'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('order_dicom_evidence',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('imaging_order_id', sa.Integer(), nullable=False, comment='ID of the imaging order this evidence belongs to'),
    sa.Column('sop_instance_uid', sa.String(length=128), nullable=False, comment='SOP Instance UID of the processed DICOM object'),
    sa.Column('study_instance_uid', sa.String(length=128), nullable=True, comment='Study Instance UID from the DICOM object'),
    sa.Column('series_instance_uid', sa.String(length=128), nullable=True, comment='Series Instance UID from the DICOM object'),
    sa.Column('accession_number', sa.String(length=64), nullable=True, comment='Accession number from the DICOM object (for verification)'),
    sa.Column('match_rule', sa.String(length=50), nullable=False, comment="Rule that matched this DICOM to the order (e.g., 'ACCESSION_NUMBER', 'STUDY_INSTANCE_UID')"),
    sa.Column('applied_rule_names', sa.Text(), nullable=True, comment='Comma-separated list of rule names that processed this DICOM object'),
    sa.Column('applied_rule_ids', sa.String(length=255), nullable=True, comment='Comma-separated list of rule IDs that processed this DICOM object'),
    sa.Column('destination_results', sa.Text(), nullable=True, comment='JSON string containing destination results: {dest_name: {status, message, dest_id, backend_type}}'),
    sa.Column('processing_successful', sa.Boolean(), nullable=False, comment='True if overall processing was successful, False if any critical failures occurred'),
    sa.Column('processed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When this DICOM object was processed'),
    sa.Column('source_identifier', sa.String(length=255), nullable=True, comment='Identifier of the source that provided this DICOM object'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['imaging_order_id'], ['imaging_orders.id'], name=op.f('fk_order_dicom_evidence_imaging_order_id_imaging_orders'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_order_dicom_evidence')),
    sa.UniqueConstraint('imaging_order_id', 'sop_instance_uid', name='unique_order_sop')
    )
    with op.batch_alter_table('order_dicom_evidence', schema=None) as batch_op:
        batch_op.create_index('idx_order_dicom_evidence_match_rule', ['match_rule'], unique=False)
        batch_op.create_index('idx_order_dicom_evidence_processed_at', ['processed_at'], unique=False)
        batch_op.create_index('idx_order_dicom_evidence_study_uid', ['study_instance_uid'], unique=False)
        batch_op.create_index(batch_op.f('ix_order_dicom_evidence_accession_number'), ['accession_number'], unique=False)
        batch_op.create_index(batch_op.f('ix_order_dicom_evidence_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_order_dicom_evidence_imaging_order_id'), ['imaging_order_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_order_dicom_evidence_sop_instance_uid'), ['sop_instance_uid'], unique=False)
        batch_op.create_index(batch_op.f('ix_order_dicom_evidence_study_instance_uid'), ['study_instance_uid'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('order_dicom_evidence', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_order_dicom_evidence_study_instance_uid'))
        batch_op.drop_index(batch_op.f('ix_order_dicom_evidence_sop_instance_uid'))
        batch_op.drop_index(batch_op.f('ix_order_dicom_evidence_imaging_order_id'))
        batch_op.drop_index(batch_op.f('ix_order_dicom_evidence_id'))
        batch_op.drop_index(batch_op.f('ix_order_dicom_evidence_accession_number'))
        batch_op.drop_index('idx_order_dicom_evidence_study_uid')
        batch_op.drop_index('idx_order_dicom_evidence_processed_at')
        batch_op.drop_index('idx_order_dicom_evidence_match_rule')

    op.drop_table('order_dicom_evidence')
    # ### end Alembic commands ###
