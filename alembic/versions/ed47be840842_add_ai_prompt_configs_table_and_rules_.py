"""add_ai_prompt_configs_table_and_rules_ai_ids_v4

Revision ID: ed47be840842
Revises: 2cc34d760f5f
Create Date: 2025-05-10 05:50:22.323305

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ed47be840842'
down_revision: Union[str, None] = '2cc34d760f5f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('a_i_prompt_configs',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Unique, human-readable name for this AI prompt configuration.'),
    sa.Column('description', sa.Text(), nullable=True, comment='Optional detailed description of what this prompt config does.'),
    sa.Column('dicom_tag_keyword', sa.String(length=100), nullable=False, comment='DICOM keyword of the tag this configuration targets (e.g., BodyPartExamined, PatientSex).'),
    sa.Column('prompt_template', sa.Text(), nullable=False, comment="The prompt template. Should include '{value}' placeholder. Can also use '{dicom_tag_keyword}'."),
    sa.Column('model_identifier', sa.String(length=100), nullable=False, comment="Identifier for the AI model to be used (e.g., 'gemini-1.5-flash-001')."),
    sa.Column('model_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='JSON object for model-specific parameters like temperature, max_output_tokens, top_p, etc.'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_a_i_prompt_configs'))
    )
    with op.batch_alter_table('a_i_prompt_configs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_a_i_prompt_configs_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_a_i_prompt_configs_dicom_tag_keyword'), ['dicom_tag_keyword'], unique=False)
        batch_op.create_index(batch_op.f('ix_a_i_prompt_configs_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_a_i_prompt_configs_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_a_i_prompt_configs_updated_at'), ['updated_at'], unique=False)

    with op.batch_alter_table('rules', schema=None) as batch_op:
        batch_op.add_column(sa.Column('ai_prompt_config_ids', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='List of AIPromptConfig IDs to be used for AI vocabulary standardization for this rule.'))
        batch_op.drop_column('ai_standardization_tags')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('rules', schema=None) as batch_op:
        batch_op.add_column(sa.Column('ai_standardization_tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment="List of DICOM tags (keywords or 'GGGG,EEEE') to standardize using AI."))
        batch_op.drop_column('ai_prompt_config_ids')

    with op.batch_alter_table('a_i_prompt_configs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_a_i_prompt_configs_updated_at'))
        batch_op.drop_index(batch_op.f('ix_a_i_prompt_configs_name'))
        batch_op.drop_index(batch_op.f('ix_a_i_prompt_configs_id'))
        batch_op.drop_index(batch_op.f('ix_a_i_prompt_configs_dicom_tag_keyword'))
        batch_op.drop_index(batch_op.f('ix_a_i_prompt_configs_created_at'))

    op.drop_table('a_i_prompt_configs')
    # ### end Alembic commands ###
