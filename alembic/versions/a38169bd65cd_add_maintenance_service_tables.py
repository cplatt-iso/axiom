"""add_maintenance_service_tables

Revision ID: a38169bd65cd
Revises: e8210a65f90f
Create Date: 2025-08-20 01:00:55.520448

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a38169bd65cd'
down_revision: Union[str, None] = 'e8210a65f90f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('data_cleaner_configs',
    sa.Column('maintenance_config_id', sa.Integer(), nullable=False, comment='References maintenance_configs.id'),
    sa.Column('target_directory', sa.String(length=500), nullable=False, comment='Directory path to monitor and clean'),
    sa.Column('cleanup_mode', sa.Enum('HIGH_WATER_MARK', 'KEEP_EMPTY', 'FREE_SPACE_PERCENTAGE', name='cleanupmode'), nullable=False),
    sa.Column('deletion_strategy', sa.Enum('OLDEST_FIRST', 'FIFO', 'LIFO', name='deletionstrategy'), nullable=False),
    sa.Column('high_water_mark_bytes', sa.Integer(), nullable=True, comment='Maximum bytes to keep (for high_water_mark mode)'),
    sa.Column('target_free_space_percentage', sa.Float(), nullable=True, comment='Target free space percentage (for free_space_percentage mode)'),
    sa.Column('minimum_free_space_gb', sa.Float(), nullable=False, comment='Minimum free space to maintain in GB'),
    sa.Column('dry_run', sa.Boolean(), nullable=False, comment="If true, log what would be deleted but don't actually delete"),
    sa.Column('minimum_file_age_hours', sa.Integer(), nullable=False, comment="Don't delete files newer than this many hours"),
    sa.Column('file_pattern', sa.String(length=255), nullable=True, comment="Glob pattern for files to consider (e.g., '*.dcm')"),
    sa.Column('exclude_pattern', sa.String(length=255), nullable=True, comment='Glob pattern for files to exclude'),
    sa.Column('batch_size', sa.Integer(), nullable=False, comment='Number of files to process in each batch'),
    sa.Column('max_files_per_run', sa.Integer(), nullable=False, comment='Maximum files to process in a single run'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_data_cleaner_configs'))
    )
    with op.batch_alter_table('data_cleaner_configs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_data_cleaner_configs_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_data_cleaner_configs_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_data_cleaner_configs_maintenance_config_id'), ['maintenance_config_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_data_cleaner_configs_updated_at'), ['updated_at'], unique=False)

    op.create_table('maintenance_configs',
    sa.Column('task_type', sa.Enum('DATA_CLEANER', name='maintenancetasktype'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Human-readable name for this config'),
    sa.Column('description', sa.Text(), nullable=True, comment='Description of what this config does'),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('monitor_interval_seconds', sa.Integer(), nullable=False, comment='How often to check in seconds'),
    sa.Column('config', sa.JSON(), nullable=False, comment='Task-specific configuration parameters'),
    sa.Column('last_run', sa.DateTime(timezone=True), nullable=True),
    sa.Column('next_run', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_maintenance_configs'))
    )
    with op.batch_alter_table('maintenance_configs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_maintenance_configs_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_maintenance_configs_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_maintenance_configs_task_type'), ['task_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_maintenance_configs_updated_at'), ['updated_at'], unique=False)

    op.create_table('maintenance_tasks',
    sa.Column('config_id', sa.Integer(), nullable=False, comment='References maintenance_configs.id'),
    sa.Column('task_type', sa.Enum('DATA_CLEANER', name='maintenancetasktype'), nullable=False),
    sa.Column('status', sa.Enum('IDLE', 'RUNNING', 'COMPLETED', 'FAILED', 'DISABLED', name='maintenancetaskstatus'), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('files_processed', sa.Integer(), nullable=False),
    sa.Column('bytes_freed', sa.Integer(), nullable=False, comment='Bytes freed in this run'),
    sa.Column('errors_encountered', sa.Integer(), nullable=False),
    sa.Column('execution_details', sa.JSON(), nullable=True, comment='Detailed execution results and logs'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if task failed'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_maintenance_tasks'))
    )
    with op.batch_alter_table('maintenance_tasks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_maintenance_tasks_config_id'), ['config_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_maintenance_tasks_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_maintenance_tasks_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_maintenance_tasks_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_maintenance_tasks_task_type'), ['task_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_maintenance_tasks_updated_at'), ['updated_at'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('maintenance_tasks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_maintenance_tasks_updated_at'))
        batch_op.drop_index(batch_op.f('ix_maintenance_tasks_task_type'))
        batch_op.drop_index(batch_op.f('ix_maintenance_tasks_status'))
        batch_op.drop_index(batch_op.f('ix_maintenance_tasks_id'))
        batch_op.drop_index(batch_op.f('ix_maintenance_tasks_created_at'))
        batch_op.drop_index(batch_op.f('ix_maintenance_tasks_config_id'))

    op.drop_table('maintenance_tasks')
    with op.batch_alter_table('maintenance_configs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_maintenance_configs_updated_at'))
        batch_op.drop_index(batch_op.f('ix_maintenance_configs_task_type'))
        batch_op.drop_index(batch_op.f('ix_maintenance_configs_id'))
        batch_op.drop_index(batch_op.f('ix_maintenance_configs_created_at'))

    op.drop_table('maintenance_configs')
    with op.batch_alter_table('data_cleaner_configs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_data_cleaner_configs_updated_at'))
        batch_op.drop_index(batch_op.f('ix_data_cleaner_configs_maintenance_config_id'))
        batch_op.drop_index(batch_op.f('ix_data_cleaner_configs_id'))
        batch_op.drop_index(batch_op.f('ix_data_cleaner_configs_created_at'))

    op.drop_table('data_cleaner_configs')
    # ### end Alembic commands ###
