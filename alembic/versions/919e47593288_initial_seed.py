"""Initial seed

Revision ID: 919e47593288
Revises: 
Create Date: 2025-05-01 18:49:20.721039

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '919e47593288'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('crosswalk_data_sources',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('db_type', sa.Enum('POSTGRES', 'MYSQL', 'MSSQL', name='crosswalk_db_type_enum'), nullable=False),
    sa.Column('connection_details', sa.JSON(), nullable=False, comment='DB connection parameters (host, port, user, password_secret, dbname)'),
    sa.Column('target_table', sa.String(length=255), nullable=False, comment='Name of the table or view containing the crosswalk data.'),
    sa.Column('sync_interval_seconds', sa.Integer(), nullable=False, comment='How often to refresh the cache (in seconds).'),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.Column('last_sync_status', sa.Enum('PENDING', 'SYNCING', 'SUCCESS', 'FAILED', name='crosswalk_sync_status_enum'), nullable=False),
    sa.Column('last_sync_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_sync_error', sa.Text(), nullable=True),
    sa.Column('last_sync_row_count', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_crosswalk_data_sources'))
    )
    with op.batch_alter_table('crosswalk_data_sources', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_crosswalk_data_sources_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_crosswalk_data_sources_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_crosswalk_data_sources_is_enabled'), ['is_enabled'], unique=False)
        batch_op.create_index(batch_op.f('ix_crosswalk_data_sources_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_crosswalk_data_sources_updated_at'), ['updated_at'], unique=False)

    op.create_table('dicomweb_source_state',
    sa.Column('source_name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('base_url', sa.String(), nullable=False),
    sa.Column('qido_prefix', sa.String(), nullable=False),
    sa.Column('wado_prefix', sa.String(), nullable=False),
    sa.Column('polling_interval_seconds', sa.Integer(), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), nullable=False, comment='Whether this source configuration is generally enabled and available (e.g., for data browser).'),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False, comment='Whether AUTOMATIC polling for this source is active based on its schedule.'),
    sa.Column('auth_type', sa.String(length=50), nullable=False),
    sa.Column('auth_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('search_filters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_processed_timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_successful_run', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_error_run', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_error_message', sa.Text(), nullable=True),
    sa.Column('found_instance_count', sa.Integer(), server_default='0', nullable=False, comment='Total count of unique instances found by QIDO across all polls.'),
    sa.Column('queued_instance_count', sa.Integer(), server_default='0', nullable=False, comment='Total count of instances actually queued for metadata processing.'),
    sa.Column('processed_instance_count', sa.Integer(), server_default='0', nullable=False, comment='Total count of instances successfully processed after being queued.'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_dicomweb_source_state'))
    )
    with op.batch_alter_table('dicomweb_source_state', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_dicomweb_source_state_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_dicomweb_source_state_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_dicomweb_source_state_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_dicomweb_source_state_is_enabled'), ['is_enabled'], unique=False)
        batch_op.create_index(batch_op.f('ix_dicomweb_source_state_source_name'), ['source_name'], unique=True)
        batch_op.create_index(batch_op.f('ix_dicomweb_source_state_updated_at'), ['updated_at'], unique=False)

    op.create_table('dimse_listener_configs',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Unique, user-friendly name for this listener configuration.'),
    sa.Column('description', sa.Text(), nullable=True, comment="Optional description of the listener's purpose."),
    sa.Column('ae_title', sa.String(length=16), nullable=False, comment='The Application Entity Title the listener will use.'),
    sa.Column('port', sa.Integer(), nullable=False, comment='The network port the listener will bind to.'),
    sa.Column('is_enabled', sa.Boolean(), nullable=False, comment='Whether this listener configuration is active and should be started.'),
    sa.Column('instance_id', sa.String(length=255), nullable=True, comment='Unique ID matching AXIOM_INSTANCE_ID env var of the listener process using this config.'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_dimse_listener_configs'))
    )
    with op.batch_alter_table('dimse_listener_configs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_dimse_listener_configs_ae_title'), ['ae_title'], unique=False)
        batch_op.create_index(batch_op.f('ix_dimse_listener_configs_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_dimse_listener_configs_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_dimse_listener_configs_instance_id'), ['instance_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_dimse_listener_configs_is_enabled'), ['is_enabled'], unique=False)
        batch_op.create_index(batch_op.f('ix_dimse_listener_configs_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_dimse_listener_configs_port'), ['port'], unique=False)
        batch_op.create_index(batch_op.f('ix_dimse_listener_configs_updated_at'), ['updated_at'], unique=False)

    op.create_table('dimse_listener_state',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('listener_id', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('status_message', sa.Text(), nullable=True),
    sa.Column('host', sa.String(), nullable=True),
    sa.Column('port', sa.Integer(), nullable=True),
    sa.Column('ae_title', sa.String(), nullable=True),
    sa.Column('last_heartbeat', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('received_instance_count', sa.Integer(), server_default='0', nullable=False, comment='Total count of instances received by this listener.'),
    sa.Column('processed_instance_count', sa.Integer(), server_default='0', nullable=False, comment='Total count of instances successfully processed after reception.'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_dimse_listener_state'))
    )
    with op.batch_alter_table('dimse_listener_state', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_dimse_listener_state_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_dimse_listener_state_listener_id'), ['listener_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_dimse_listener_state_updated_at'), ['updated_at'], unique=False)

    op.create_table('dimse_qr_sources',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Unique, user-friendly name for this remote DIMSE peer configuration.'),
    sa.Column('description', sa.Text(), nullable=True, comment='Optional description of the remote peer or its purpose.'),
    sa.Column('remote_ae_title', sa.String(length=16), nullable=False, comment='AE Title of the remote peer to query/retrieve from.'),
    sa.Column('remote_host', sa.String(length=255), nullable=False, comment='Hostname or IP address of the remote peer.'),
    sa.Column('remote_port', sa.Integer(), nullable=False, comment="Network port of the remote peer's DIMSE service."),
    sa.Column('local_ae_title', sa.String(length=16), nullable=False, comment='AE Title our SCU will use when associating with the remote peer.'),
    sa.Column('tls_enabled', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Enable TLS for outgoing connections to the remote peer.'),
    sa.Column('tls_ca_cert_secret_name', sa.String(length=512), nullable=True, comment="REQUIRED for TLS: Secret Manager resource name for the CA certificate (PEM) used to verify the remote peer's server certificate."),
    sa.Column('tls_client_cert_secret_name', sa.String(length=512), nullable=True, comment='Optional (for mTLS): Secret Manager resource name for OUR client certificate (PEM).'),
    sa.Column('tls_client_key_secret_name', sa.String(length=512), nullable=True, comment='Optional (for mTLS): Secret Manager resource name for OUR client private key (PEM).'),
    sa.Column('polling_interval_seconds', sa.Integer(), nullable=False, comment='Frequency in seconds at which to poll the source using C-FIND.'),
    sa.Column('is_enabled', sa.Boolean(), nullable=False, comment='Whether this source configuration is generally enabled and available (e.g., for data browser).'),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False, comment='Whether AUTOMATIC polling for this source is active based on its schedule.'),
    sa.Column('query_level', sa.String(length=10), nullable=False, comment='Query Retrieve Level for C-FIND (e.g., STUDY).'),
    sa.Column('query_filters', sa.JSON(), nullable=True, comment='JSON object containing key-value pairs for C-FIND query identifiers.'),
    sa.Column('move_destination_ae_title', sa.String(length=16), nullable=True, comment='AE Title of OUR listener where retrieved instances should be sent via C-MOVE.'),
    sa.Column('last_successful_query', sa.DateTime(timezone=True), nullable=True, comment='Timestamp of the last successful C-FIND query.'),
    sa.Column('last_successful_move', sa.DateTime(timezone=True), nullable=True, comment='Timestamp of the last successful C-MOVE request completion (if applicable).'),
    sa.Column('last_error_time', sa.DateTime(timezone=True), nullable=True, comment='Timestamp of the last error encountered during polling or retrieval.'),
    sa.Column('last_error_message', sa.Text(), nullable=True, comment='Details of the last error encountered.'),
    sa.Column('found_study_count', sa.Integer(), server_default='0', nullable=False, comment='Total count of unique studies found by C-FIND across all polls.'),
    sa.Column('move_queued_study_count', sa.Integer(), server_default='0', nullable=False, comment='Total count of studies actually queued for C-MOVE retrieval.'),
    sa.Column('processed_instance_count', sa.Integer(), server_default='0', nullable=False, comment='Total count of instances successfully processed after C-MOVE.'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_dimse_qr_sources'))
    )
    with op.batch_alter_table('dimse_qr_sources', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_dimse_qr_sources_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_dimse_qr_sources_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_dimse_qr_sources_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_dimse_qr_sources_is_enabled'), ['is_enabled'], unique=False)
        batch_op.create_index(batch_op.f('ix_dimse_qr_sources_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_dimse_qr_sources_remote_ae_title'), ['remote_ae_title'], unique=False)
        batch_op.create_index(batch_op.f('ix_dimse_qr_sources_tls_enabled'), ['tls_enabled'], unique=False)
        batch_op.create_index(batch_op.f('ix_dimse_qr_sources_updated_at'), ['updated_at'], unique=False)

    op.create_table('processed_study_log',
    sa.Column('source_type', sa.Enum('DICOMWEB', 'DIMSE_QR', 'DIMSE_LISTENER', name='processed_study_source_enum', native_enum=False), nullable=False, comment='Type of the source that initiated processing (DICOMWEB, DIMSE_QR, DIMSE_LISTENER).'),
    sa.Column('source_id', sa.String(length=255), nullable=False, comment='Identifier of the source config (int ID for DICOMweb/QR, string instance_id for Listener).'),
    sa.Column('study_instance_uid', sa.String(length=128), nullable=False, comment='The Study Instance UID that was processed/queued.'),
    sa.Column('first_seen_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the study was first encountered by this source.'),
    sa.Column('retrieval_queued_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the retrieval/processing task was queued.'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_processed_study_log')),
    sa.UniqueConstraint('source_type', 'source_id', 'study_instance_uid', name='uq_processed_study_source_uid')
    )
    with op.batch_alter_table('processed_study_log', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_processed_study_log_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_processed_study_log_id'), ['id'], unique=False)
        batch_op.create_index('ix_processed_study_log_queued_at', ['retrieval_queued_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_processed_study_log_source_id'), ['source_id'], unique=False)
        batch_op.create_index('ix_processed_study_log_source_id_str', ['source_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_processed_study_log_source_type'), ['source_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_processed_study_log_study_instance_uid'), ['study_instance_uid'], unique=False)
        batch_op.create_index(batch_op.f('ix_processed_study_log_updated_at'), ['updated_at'], unique=False)

    op.create_table('roles',
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles'))
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_roles_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_roles_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_roles_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_roles_updated_at'), ['updated_at'], unique=False)

    op.create_table('rule_sets',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False, comment='Lower numbers execute first'),
    sa.Column('execution_mode', sa.Enum('FIRST_MATCH', 'ALL_MATCHES', name='ruleset_execution_mode_enum'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_rule_sets'))
    )
    with op.batch_alter_table('rule_sets', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_rule_sets_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_rule_sets_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_rule_sets_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_rule_sets_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_rule_sets_priority'), ['priority'], unique=False)
        batch_op.create_index(batch_op.f('ix_rule_sets_updated_at'), ['updated_at'], unique=False)

    op.create_table('schedules',
    sa.Column('name', sa.String(length=100), nullable=False, comment="Unique, user-friendly name for this schedule (e.g., 'Overnight Telerad Hours')."),
    sa.Column('description', sa.Text(), nullable=True, comment='Optional description of when this schedule is active.'),
    sa.Column('is_enabled', sa.Boolean(), nullable=False, comment='Whether this schedule definition is active and can be assigned to rules.'),
    sa.Column('time_ranges', sa.JSON(), nullable=False, comment='List of time range definitions (days, start_time HH:MM, end_time HH:MM).'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_schedules'))
    )
    with op.batch_alter_table('schedules', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_schedules_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_schedules_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_schedules_is_enabled'), ['is_enabled'], unique=False)
        batch_op.create_index(batch_op.f('ix_schedules_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_schedules_updated_at'), ['updated_at'], unique=False)

    op.create_table('storage_backend_configs',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Unique, user-friendly name for this storage backend configuration.'),
    sa.Column('description', sa.Text(), nullable=True, comment="Optional description of the backend's purpose or location."),
    sa.Column('backend_type', sa.String(length=50), nullable=False, comment='Identifier for the type of storage backend.'),
    sa.Column('config', sa.JSON(), nullable=False, comment='JSON object containing backend-specific settings (path, AE title, bucket, etc.).'),
    sa.Column('is_enabled', sa.Boolean(), nullable=False, comment='Whether this storage backend configuration is active and usable in rules.'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_storage_backend_configs'))
    )
    with op.batch_alter_table('storage_backend_configs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_storage_backend_configs_backend_type'), ['backend_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_storage_backend_configs_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_storage_backend_configs_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_storage_backend_configs_is_enabled'), ['is_enabled'], unique=False)
        batch_op.create_index(batch_op.f('ix_storage_backend_configs_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_storage_backend_configs_updated_at'), ['updated_at'], unique=False)

    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('google_id', sa.String(length=255), nullable=True),
    sa.Column('full_name', sa.String(length=200), nullable=True),
    sa.Column('picture', sa.String(length=512), nullable=True),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_google_id'), ['google_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_updated_at'), ['updated_at'], unique=False)

    op.create_table('api_keys',
    sa.Column('hashed_key', sa.String(length=255), nullable=False),
    sa.Column('prefix', sa.String(length=8), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_api_keys_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_api_keys'))
    )
    with op.batch_alter_table('api_keys', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_api_keys_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_api_keys_hashed_key'), ['hashed_key'], unique=True)
        batch_op.create_index(batch_op.f('ix_api_keys_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_api_keys_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_api_keys_prefix'), ['prefix'], unique=True)
        batch_op.create_index(batch_op.f('ix_api_keys_updated_at'), ['updated_at'], unique=False)

    op.create_table('crosswalk_maps',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.Column('data_source_id', sa.Integer(), nullable=False),
    sa.Column('match_columns', sa.JSON(), nullable=False, comment='How to match DICOM tags to source table columns. [{"column_name": "mrn", "dicom_tag": "0010,0020"}]'),
    sa.Column('cache_key_columns', sa.JSON(), nullable=False, comment='List of column names from the source table used to build the cache key.'),
    sa.Column('replacement_mapping', sa.JSON(), nullable=False, comment='How to map source table columns to target DICOM tags. [{"source_column": "new_mrn", "dicom_tag": "0010,0020", "dicom_vr": "LO"}]'),
    sa.Column('cache_ttl_seconds', sa.Integer(), nullable=True, comment='Optional TTL for cache entries (overrides source sync interval for lookup).'),
    sa.Column('on_cache_miss', sa.String(length=50), nullable=False, comment="Behavior on cache miss ('fail', 'query_db', 'log_only')."),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['data_source_id'], ['crosswalk_data_sources.id'], name=op.f('fk_crosswalk_maps_data_source_id_crosswalk_data_sources'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_crosswalk_maps'))
    )
    with op.batch_alter_table('crosswalk_maps', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_crosswalk_maps_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_crosswalk_maps_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_crosswalk_maps_is_enabled'), ['is_enabled'], unique=False)
        batch_op.create_index(batch_op.f('ix_crosswalk_maps_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_crosswalk_maps_updated_at'), ['updated_at'], unique=False)

    op.create_table('rules',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False, comment='Lower numbers execute first within a ruleset'),
    sa.Column('ruleset_id', sa.Integer(), nullable=False),
    sa.Column('match_criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Criteria object (structure defined/validated by Pydantic schema)'),
    sa.Column('association_criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Optional list of criteria based on association details (Calling AE, IP).'),
    sa.Column('tag_modifications', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='List of modification action objects (validated by Pydantic)'),
    sa.Column('applicable_sources', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='List of source identifiers. Applies to all if null/empty.'),
    sa.Column('schedule_id', sa.Integer(), nullable=True, comment='Optional ID of the Schedule controlling when this rule is active.'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['ruleset_id'], ['rule_sets.id'], name=op.f('fk_rules_ruleset_id_rule_sets'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['schedule_id'], ['schedules.id'], name=op.f('fk_rules_schedule_id_schedules'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_rules'))
    )
    with op.batch_alter_table('rules', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_rules_applicable_sources'), ['applicable_sources'], unique=False)
        batch_op.create_index(batch_op.f('ix_rules_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_rules_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_rules_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_rules_priority'), ['priority'], unique=False)
        batch_op.create_index(batch_op.f('ix_rules_ruleset_id'), ['ruleset_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_rules_schedule_id'), ['schedule_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_rules_updated_at'), ['updated_at'], unique=False)

    op.create_table('user_role_association',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_user_role_association_role_id_roles'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_role_association_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'role_id', name=op.f('pk_user_role_association'))
    )
    op.create_table('rule_destination_association',
    sa.Column('rule_id', sa.Integer(), nullable=False),
    sa.Column('storage_backend_config_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['rule_id'], ['rules.id'], name=op.f('fk_rule_destination_association_rule_id_rules'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['storage_backend_config_id'], ['storage_backend_configs.id'], name=op.f('fk_rule_destination_association_storage_backend_config_id_storage_backend_configs'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('rule_id', 'storage_backend_config_id', name=op.f('pk_rule_destination_association'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('rule_destination_association')
    op.drop_table('user_role_association')
    with op.batch_alter_table('rules', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_rules_updated_at'))
        batch_op.drop_index(batch_op.f('ix_rules_schedule_id'))
        batch_op.drop_index(batch_op.f('ix_rules_ruleset_id'))
        batch_op.drop_index(batch_op.f('ix_rules_priority'))
        batch_op.drop_index(batch_op.f('ix_rules_is_active'))
        batch_op.drop_index(batch_op.f('ix_rules_id'))
        batch_op.drop_index(batch_op.f('ix_rules_created_at'))
        batch_op.drop_index(batch_op.f('ix_rules_applicable_sources'))

    op.drop_table('rules')
    with op.batch_alter_table('crosswalk_maps', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_crosswalk_maps_updated_at'))
        batch_op.drop_index(batch_op.f('ix_crosswalk_maps_name'))
        batch_op.drop_index(batch_op.f('ix_crosswalk_maps_is_enabled'))
        batch_op.drop_index(batch_op.f('ix_crosswalk_maps_id'))
        batch_op.drop_index(batch_op.f('ix_crosswalk_maps_created_at'))

    op.drop_table('crosswalk_maps')
    with op.batch_alter_table('api_keys', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_api_keys_updated_at'))
        batch_op.drop_index(batch_op.f('ix_api_keys_prefix'))
        batch_op.drop_index(batch_op.f('ix_api_keys_name'))
        batch_op.drop_index(batch_op.f('ix_api_keys_id'))
        batch_op.drop_index(batch_op.f('ix_api_keys_hashed_key'))
        batch_op.drop_index(batch_op.f('ix_api_keys_created_at'))

    op.drop_table('api_keys')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_updated_at'))
        batch_op.drop_index(batch_op.f('ix_users_id'))
        batch_op.drop_index(batch_op.f('ix_users_google_id'))
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.drop_index(batch_op.f('ix_users_created_at'))

    op.drop_table('users')
    with op.batch_alter_table('storage_backend_configs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_storage_backend_configs_updated_at'))
        batch_op.drop_index(batch_op.f('ix_storage_backend_configs_name'))
        batch_op.drop_index(batch_op.f('ix_storage_backend_configs_is_enabled'))
        batch_op.drop_index(batch_op.f('ix_storage_backend_configs_id'))
        batch_op.drop_index(batch_op.f('ix_storage_backend_configs_created_at'))
        batch_op.drop_index(batch_op.f('ix_storage_backend_configs_backend_type'))

    op.drop_table('storage_backend_configs')
    with op.batch_alter_table('schedules', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_schedules_updated_at'))
        batch_op.drop_index(batch_op.f('ix_schedules_name'))
        batch_op.drop_index(batch_op.f('ix_schedules_is_enabled'))
        batch_op.drop_index(batch_op.f('ix_schedules_id'))
        batch_op.drop_index(batch_op.f('ix_schedules_created_at'))

    op.drop_table('schedules')
    with op.batch_alter_table('rule_sets', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_rule_sets_updated_at'))
        batch_op.drop_index(batch_op.f('ix_rule_sets_priority'))
        batch_op.drop_index(batch_op.f('ix_rule_sets_name'))
        batch_op.drop_index(batch_op.f('ix_rule_sets_is_active'))
        batch_op.drop_index(batch_op.f('ix_rule_sets_id'))
        batch_op.drop_index(batch_op.f('ix_rule_sets_created_at'))

    op.drop_table('rule_sets')
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_roles_updated_at'))
        batch_op.drop_index(batch_op.f('ix_roles_name'))
        batch_op.drop_index(batch_op.f('ix_roles_id'))
        batch_op.drop_index(batch_op.f('ix_roles_created_at'))

    op.drop_table('roles')
    with op.batch_alter_table('processed_study_log', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_processed_study_log_updated_at'))
        batch_op.drop_index(batch_op.f('ix_processed_study_log_study_instance_uid'))
        batch_op.drop_index(batch_op.f('ix_processed_study_log_source_type'))
        batch_op.drop_index('ix_processed_study_log_source_id_str')
        batch_op.drop_index(batch_op.f('ix_processed_study_log_source_id'))
        batch_op.drop_index('ix_processed_study_log_queued_at')
        batch_op.drop_index(batch_op.f('ix_processed_study_log_id'))
        batch_op.drop_index(batch_op.f('ix_processed_study_log_created_at'))

    op.drop_table('processed_study_log')
    with op.batch_alter_table('dimse_qr_sources', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_dimse_qr_sources_updated_at'))
        batch_op.drop_index(batch_op.f('ix_dimse_qr_sources_tls_enabled'))
        batch_op.drop_index(batch_op.f('ix_dimse_qr_sources_remote_ae_title'))
        batch_op.drop_index(batch_op.f('ix_dimse_qr_sources_name'))
        batch_op.drop_index(batch_op.f('ix_dimse_qr_sources_is_enabled'))
        batch_op.drop_index(batch_op.f('ix_dimse_qr_sources_is_active'))
        batch_op.drop_index(batch_op.f('ix_dimse_qr_sources_id'))
        batch_op.drop_index(batch_op.f('ix_dimse_qr_sources_created_at'))

    op.drop_table('dimse_qr_sources')
    with op.batch_alter_table('dimse_listener_state', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_dimse_listener_state_updated_at'))
        batch_op.drop_index(batch_op.f('ix_dimse_listener_state_listener_id'))
        batch_op.drop_index(batch_op.f('ix_dimse_listener_state_id'))

    op.drop_table('dimse_listener_state')
    with op.batch_alter_table('dimse_listener_configs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_dimse_listener_configs_updated_at'))
        batch_op.drop_index(batch_op.f('ix_dimse_listener_configs_port'))
        batch_op.drop_index(batch_op.f('ix_dimse_listener_configs_name'))
        batch_op.drop_index(batch_op.f('ix_dimse_listener_configs_is_enabled'))
        batch_op.drop_index(batch_op.f('ix_dimse_listener_configs_instance_id'))
        batch_op.drop_index(batch_op.f('ix_dimse_listener_configs_id'))
        batch_op.drop_index(batch_op.f('ix_dimse_listener_configs_created_at'))
        batch_op.drop_index(batch_op.f('ix_dimse_listener_configs_ae_title'))

    op.drop_table('dimse_listener_configs')
    with op.batch_alter_table('dicomweb_source_state', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_dicomweb_source_state_updated_at'))
        batch_op.drop_index(batch_op.f('ix_dicomweb_source_state_source_name'))
        batch_op.drop_index(batch_op.f('ix_dicomweb_source_state_is_enabled'))
        batch_op.drop_index(batch_op.f('ix_dicomweb_source_state_is_active'))
        batch_op.drop_index(batch_op.f('ix_dicomweb_source_state_id'))
        batch_op.drop_index(batch_op.f('ix_dicomweb_source_state_created_at'))

    op.drop_table('dicomweb_source_state')
    with op.batch_alter_table('crosswalk_data_sources', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_crosswalk_data_sources_updated_at'))
        batch_op.drop_index(batch_op.f('ix_crosswalk_data_sources_name'))
        batch_op.drop_index(batch_op.f('ix_crosswalk_data_sources_is_enabled'))
        batch_op.drop_index(batch_op.f('ix_crosswalk_data_sources_id'))
        batch_op.drop_index(batch_op.f('ix_crosswalk_data_sources_created_at'))

    op.drop_table('crosswalk_data_sources')
    # ### end Alembic commands ###
