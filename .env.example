# .env.example
# Rename this file to .env for local development and fill in values
# DO NOT commit .env files with sensitive credentials to version control

# --- Core Application Settings ---
DEBUG=True
# Adjust for your frontend's address during development
# Example allowing connections from standard React dev server port
BACKEND_CORS_ORIGINS='["http://localhost:3000", "http://127.0.0.1:3000"]'

# --- Database Settings (PostgreSQL) ---
# Use the service name defined in docker-compose.yml
POSTGRES_SERVER=db
POSTGRES_PORT=5432
POSTGRES_USER=dicom_processor_user
POSTGRES_PASSWORD=changeme # <-- CHANGE THIS PASSWORD
POSTGRES_DB=dicom_processor_db
# Optional: Provide full DSN instead (less common with Docker service names)
# SQLALCHEMY_DATABASE_URI=postgresql+psycopg://dicom_processor_user:changeme@db:5432/dicom_processor_db

# --- RabbitMQ Settings ---
# Use the service name defined in docker-compose.yml
RABBITMQ_HOST=rabbitmq
RABBITMQ_PORT=5672
RABBITMQ_USER=guest
RABBITMQ_PASSWORD=guest
# Optional: Specify virtual host if not default "/" (ensure Celery URL matches)
# RABBITMQ_VHOST=/my_vhost
# Optional: Provide full Broker URL instead
# CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/

# --- DICOM SCP (Receiver) Settings ---
DICOM_SCP_AE_TITLE=DICOM_PROCESSOR
DICOM_SCP_PORT=11112
# Path inside the container where incoming files are temporarily stored
DICOM_STORAGE_PATH=/dicom_data/incoming

# --- Storage Backend Configuration ---
# Default storage backend if no rule destination matches
# Options: filesystem, cstore, gcs (once implemented)
DEFAULT_STORAGE_BACKEND=filesystem
# Path inside the container where 'filesystem' backend stores processed files
FILESYSTEM_STORAGE_PATH=/dicom_data/processed

# Example for C-STORE destination (only needed if 'cstore' backend used by rules)
# CSTORE_DESTINATION_AE_TITLE=REMOTE_PACS
# CSTORE_DESTINATION_HOST=192.168.1.100
# CSTORE_DESTINATION_PORT=104

# Example for GCS destination (only needed if 'gcs' backend used by rules)
# GCS_BUCKET_NAME=your-axiom-flow-dicom-bucket
# GCS_PROJECT_ID=your-gcp-project-id
# Note: For GCS, also set the GOOGLE_APPLICATION_CREDENTIALS env var, pointing to a service account key file.

# --- Security Settings ---
# Replace with a securely generated key (e.g., openssl rand -hex 32)
SECRET_KEY=replace_this_with_a_real_secret_key_32_bytes_long
ACCESS_TOKEN_EXPIRE_MINUTES=30
ALGORITHM=HS256
