# docker-compose.enterprise.yml
# Enterprise extension for DICOM Query Spanning - adds microservices to existing system
# Usage: docker compose -f docker-compose.yml -f docker-compose.enterprise.yml up -d

services:
  # Spanner Query Coordinator (NEW)
  spanner-coordinator:
    build:
      context: .
      dockerfile: Dockerfile.spanner-coordinator
    container_name: axiom-spanner-coordinator
    ports:
      - "8002:8000"  # Separate port for spanner coordinator
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dicom_processor_user}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-dicom_processor_db}
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672/
      - PYTHONPATH=/app
      - GOOGLE_APPLICATION_CREDENTIALS=/etc/gcp/axiom-flow-gcs-key.json
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./axiom-flow-gcs-key.json:/etc/gcp/axiom-flow-gcs-key.json:ro
      - ./logs:/app/logs
    networks:
      - default
      - shared
    restart: unless-stopped
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:24224"
        tag: "axiom.spanner_coordinator.{{.Name}}"
        mode: non-blocking
        max-buffer-size: "10m"
        fluentd-retry-wait: "1s"
        fluentd-max-retries: "60"

  # DIMSE Query Workers for Spanning (NEW) - Scale this for your 8 PACS
  dimse-query-worker:
    build:
      context: .
      dockerfile: Dockerfile.dimse-worker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dicom_processor_user}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-dicom_processor_db}
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672/
      - WORKER_TYPE=dimse-query
      - PYTHONPATH=/app
      - GOOGLE_APPLICATION_CREDENTIALS=/etc/gcp/axiom-flow-gcs-key.json
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./axiom-flow-gcs-key.json:/etc/gcp/axiom-flow-gcs-key.json:ro
      - ./logs:/app/logs
    networks:
      - default
      - shared
    restart: unless-stopped
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:24224"
        tag: "axiom.dimse_query_worker.{{.Name}}"
        mode: non-blocking
        max-buffer-size: "10m"
        fluentd-retry-wait: "1s"
        fluentd-max-retries: "60"

  # DIMSE SCP Listener for External Spanning Queries (NEW)
  dimse-scp-listener:
    build:
      context: .
      dockerfile: Dockerfile.dimse-scp
    ports:
      - "11114:11114"  # Different port from existing listeners (11112, 11113)
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dicom_processor_user}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-dicom_processor_db}
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672/
      - PYTHONPATH=/app
      - GOOGLE_APPLICATION_CREDENTIALS=/etc/gcp/axiom-flow-gcs-key.json
      - AXIOM_INSTANCE_ID=spanner_scp
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./axiom-flow-gcs-key.json:/etc/gcp/axiom-flow-gcs-key.json:ro
      - ./logs:/app/logs
    networks:
      - default
      - shared
    restart: unless-stopped
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:24224"
        tag: "axiom.dimse_scp_listener.{{.Name}}"
        mode: non-blocking
        max-buffer-size: "10m"
        fluentd-retry-wait: "1s"
        fluentd-max-retries: "60"

# No need to redefine volumes/networks - inherits from main compose
