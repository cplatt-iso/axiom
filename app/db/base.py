# app/db/base.py
import re
from typing import Optional
from datetime import datetime

from sqlalchemy import MetaData, String, func, DateTime, Integer
# Import column directly ONLY IF needed for non-declarative parts later, like raw SQL, otherwise avoid
# from sqlalchemy import Column
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, declared_attr

# Define naming convention for constraints to ensure consistency,
# especially if using migrations with Alembic later.
convention = {
    "ix": "ix_%(column_0_label)s",
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s",
}

metadata = MetaData(naming_convention=convention)

class Base(DeclarativeBase):
    """
    Base class for all SQLAlchemy models.

    Includes an auto-generated __tablename__, a primary key `id`,
    and standard created_at/updated_at timestamps.
    """
    metadata = metadata # Apply naming convention

    # Define primary key using Mapped and mapped_column
    # Removed init=False - not needed for basic ORM mapping
    id: Mapped[int] = mapped_column(primary_key=True, index=True)

    # Auto-managed timestamps
    # Use Optional because they are generated by the server or on update.
    # server_default handles initial creation, onupdate handles updates.
    # index=True can be useful for sorting/filtering by time.
    # Removed init=False
    created_at: Mapped[Optional[datetime]] = mapped_column(
        DateTime(timezone=True), server_default=func.now(), index=True
    )
    updated_at: Mapped[Optional[datetime]] = mapped_column(
        DateTime(timezone=True), onupdate=func.now(), index=True
    )


    # Generate __tablename__ automatically based on class name
    # Converts CamelCase class names to snake_case table names
    @declared_attr.directive
    def __tablename__(cls) -> str:
        name = re.sub(r'(?<!^)(?=[A-Z])', '_', cls.__name__).lower()
        if not name.endswith('s'):
            name += 's'
        return name
