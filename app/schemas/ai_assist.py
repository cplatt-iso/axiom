# app/schemas/ai_assist.py
from pydantic import BaseModel, Field
from typing import Optional, Dict, Any, List

class RuleGenRequest(BaseModel):
    """Schema for requesting rule generation assistance."""
    prompt: str = Field(
        ...,
        min_length=10,
        max_length=2000,
        description="Natural language description of the desired rule logic.",
        examples=[
            "If the Modality is CT and the Body Part Examined is HEAD, set the Description to 'Head CT'",
            "For studies coming from 'SOURCE_AE', delete the PatientComments tag and prepend 'ROUTED-' to the StudyDescription.",
            "Match MRI studies for patient ID '12345' and copy the AccessionNumber to PrivateCreator tag (0077,0010) group (0077,1010)."
        ]
    )
    # Optional context fields could be added later if needed
    # ruleset_id: Optional[int] = Field(None, description="Optional ID of the ruleset this rule might belong to (for context).")
    # existing_rule: Optional[dict] = Field(None, description="Optional: Existing rule JSON for refinement.")

class RuleGenSuggestion(BaseModel):
    """Represents the suggested rule components generated by the AI."""
    match_criteria: Optional[List[Dict[str, Any]]] = Field(None, description="Suggested match criteria JSON.")
    association_criteria: Optional[List[Dict[str, Any]]] = Field(None, description="Suggested association criteria JSON.")
    tag_modifications: Optional[List[Dict[str, Any]]] = Field(None, description="Suggested tag modifications JSON.")
    applicable_sources: Optional[List[str]] = Field(None, description="Suggested applicable sources list.")

class RuleGenResponse(BaseModel):
    """Schema for the response from the rule generation assistant."""
    suggestion: Optional[RuleGenSuggestion] = Field(None, description="The AI-generated suggestion for rule components.")
    explanation: Optional[str] = Field(None, description="Explanation of the generated suggestion or why it failed.")
    confidence: Optional[float] = Field(None, ge=0.0, le=1.0, description="Confidence score (0.0-1.0) if provided by the model.")
    warnings: List[str] = Field(default_factory=list, description="Potential issues or ambiguities detected.")
    error: Optional[str] = Field(None, description="Error message if generation failed.")
